### 步骤1：编写源代码

首先，您需要编写一些源代码，通常是C或C++文件。假设我们创建一个简单的数学库，该库包含加法和减法功能。创建一个名为 `math_lib.c` 的文件：

```c
// math_lib.c
#include "math_lib.h"

int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}
```

然后，创建一个头文件 `math_lib.h`，用于声明这些函数：

```c
// math_lib.h
#ifndef MATH_LIB_H
#define MATH_LIB_H

int add(int a, int b);
int subtract(int a, int b);

#endif // MATH_LIB_H
```

### 步骤2：编译源文件为目标文件

使用 `gcc` 或 `g++` 编译源文件成为目标文件（.o 文件）。在终端中运行以下命令：

```bash
gcc -c math_lib.c -o math_lib.o
```

这里的 `-c` 选项告诉编译器只编译源文件而不链接，`-o` 用来指定输出目标文件的名称。

### 步骤3：创建静态库

使用 `ar` 命令创建静态库（.a 文件）。在终端中运行以下命令：

```bash
ar rcs libmath.a math_lib.o
```

这里的 `libmath.a` 是您要创建的静态库的名称。`r` 表示添加文件，`c` 表示创建库，`s` 表示索引。

### 步骤4：使用静态库

现在，您可以创建一个主程序文件 `main.c` 来使用这个静态库：

```c
// main.c
#include <stdio.h>
#include "math_lib.h"

int main() {
    int a = 5, b = 3;
    printf("Addition: %d\n", add(a, b));
    printf("Subtraction: %d\n", subtract(a, b));
    return 0;
}
```

接下来，您需要使用静态库编译主程序。运行以下命令：

```bash
gcc main.c -L. -lmath -o main
```

- `-L.` 表示库文件在当前目录。
- `-lmath` 表示链接名为 `math` 的库（注意：去掉了前缀 `lib` 和后缀 `.a`）。
- `-o main` 指定输出文件的名称为 `main`。

### 步骤5：运行程序

最后，运行编译好的程序：

```bash
./main
```

您将看到类似以下输出：

```
Addition: 8
Subtraction: 2
```

### 总结

通过以上步骤，您已经成功创建了一个简易的静态库并将其应用于一个C程序中。这些步骤可以适用于更复杂的库和项目，只需遵循相同的基本流程即可。


